/*
/*
 * Copyright (c) Mike Lischke. All rights reserved.
 *
 * Parts of this file not copied from the original ATNDeserializer.ts file are released under the MIT license.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * All copied parts are released under the BSD-3-Clause.
 * Copyright 2016 The ANTLR Project. All rights reserved.
 */

/* spell-checker: disable */

/* eslint-disable @typescript-eslint/naming-convention */

import {
    ATNDeserializer, ATNDeserializationOptions, ATN, ATNType, LoopEndState, BlockStartState, ATNStateType,
    InvalidState, ATNState, BlockEndState, DecisionState, RuleStartState, RuleStopState, TokensStartState, Transition,
    RuleTransition, EpsilonTransition, PlusLoopbackState, PlusBlockStartState, StarLoopbackState, StarLoopEntryState,
    LexerAction, LexerActionType, ActionTransition, LexerCustomAction, BasicBlockStartState, BasicState,
    AtomTransition, TransitionType, ParserATNSimulator, SetTransition, RangeTransition, NotSetTransition,
} from "antlr4ts/atn";
import { UUID, IntervalSet, Array2DHashSet, Interval, BitSet } from "antlr4ts/misc";
import { NotNull } from "antlr4ts/Decorators";
import { Token } from "antlr4ts";
import { DFA } from "antlr4ts/dfa/DFA";

interface IUnicodeDeserializer {
    // Work around Java not allowing mutation of captured variables
    // by returning amount by which to increment p after each read
    readonly size: number;

    // Wrapper for readInt() or readInt32()
    readUnicode(data: Uint16Array, p: number): number;
}

const enum UnicodeDeserializingMode {
    UNICODE_BMP,
    UNICODE_SMP,
}

/**
 * This derived deserializer makes loading of ATNs generated by standard ANTLR possible. The antlr4ts library uses
 * an incompatible version.
 * Unfortunately, we have to duplicate all the private stuff to make the class working.
 */
export class CompatibleATNDeserializer extends ATNDeserializer {
    private static readonly BASE_SERIALIZED_UUID2: UUID = UUID.fromString("E4178468-DF95-44D0-AD87-F22A5D5FB6D3");
    private static readonly ADDED_LEXER_ACTIONS2: UUID = UUID.fromString("AB35191A-1603-487E-B75A-479B831EAF6D");
    private static readonly ADDED_UNICODE_SMP2: UUID = UUID.fromString("C23FEA89-0605-4f51-AFB8-058BCAB8C91B");

    // antlr4ts uses a different UUID for ADDED_UNICODE_SMP than the original ANTLR4 tool.
    private static readonly ADDED_UNICODE_SMP_ORIGINAL: UUID = UUID.fromString("59627784-3BE5-417A-B9EB-8131A7286089");

    private static readonly SUPPORTED_UUIDS2: UUID[] = [
        CompatibleATNDeserializer.BASE_SERIALIZED_UUID2,
        CompatibleATNDeserializer.ADDED_LEXER_ACTIONS2,
        CompatibleATNDeserializer.ADDED_UNICODE_SMP_ORIGINAL,
        CompatibleATNDeserializer.ADDED_UNICODE_SMP2,
    ];

    /**
     * This is the current serialized UUID.
     */
    private static readonly SERIALIZED_UUID2: UUID = CompatibleATNDeserializer.ADDED_UNICODE_SMP2;

    @NotNull
    private readonly deserializationOptions2: ATNDeserializationOptions;

    public constructor(deserializationOptions?: ATNDeserializationOptions) {
        super(deserializationOptions);
        if (deserializationOptions == null) {
            deserializationOptions = ATNDeserializationOptions.defaultOptions;
        }

        this.deserializationOptions2 = deserializationOptions;
    }

    /**
     * Determines if a particular serialized representation of an ATN supports
     * a particular feature, identified by the {@link UUID} used for serializing
     * the ATN at the time the feature was first introduced.
     *
     * @param feature The {@link UUID} marking the first time the feature was
     * supported in the serialized ATN.
     * @param actualUuid The {@link UUID} of the actual serialized ATN which is
     * currently being deserialized.
     * @returns `true` if the `actualUuid` value represents a
     * serialized ATN at or after the feature identified by `feature` was
     * introduced; otherwise, `false`.
     */
    public static override isFeatureSupported(feature: UUID, actualUuid: UUID): boolean {
        const featureIndex = CompatibleATNDeserializer.SUPPORTED_UUIDS2.findIndex((e) => { return e.equals(feature); });
        if (featureIndex < 0) {
            return false;
        }

        return CompatibleATNDeserializer.SUPPORTED_UUIDS2.findIndex((e) => {
            return e.equals(actualUuid);
        }) >= featureIndex;
    }

    private static getUnicodeDeserializer2(mode: UnicodeDeserializingMode): IUnicodeDeserializer {
        if (mode === UnicodeDeserializingMode.UNICODE_BMP) {
            return {
                readUnicode: (data: Uint16Array, p: number): number => { return ATNDeserializer.toInt(data[p]); },
                size: 1,
            };
        } else {
            return {
                readUnicode: (data: Uint16Array, p: number): number => { return ATNDeserializer.toInt32(data, p); },
                size: 2,
            };
        }
    }

    private static inlineSetRules2(atn: ATN): number {
        let inlinedCalls = 0;

        const ruleToInlineTransition = new Array<Transition | undefined>(atn.ruleToStartState.length);
        for (let i = 0; i < atn.ruleToStartState.length; i++) {
            const startState: RuleStartState = atn.ruleToStartState[i];
            let middleState: ATNState = startState;
            while (middleState.onlyHasEpsilonTransitions
                && middleState.numberOfOptimizedTransitions === 1
                && middleState.getOptimizedTransition(0).serializationType === TransitionType.EPSILON) {
                middleState = middleState.getOptimizedTransition(0).target;
            }

            if (middleState.numberOfOptimizedTransitions !== 1) {
                continue;
            }

            const matchTransition: Transition = middleState.getOptimizedTransition(0);
            const matchTarget: ATNState = matchTransition.target;
            if (matchTransition.isEpsilon
                || !matchTarget.onlyHasEpsilonTransitions
                || matchTarget.numberOfOptimizedTransitions !== 1
                || !(matchTarget.getOptimizedTransition(0).target instanceof RuleStopState)) {
                continue;
            }

            switch (matchTransition.serializationType) {
                case TransitionType.ATOM:
                case TransitionType.RANGE:
                case TransitionType.SET:
                    ruleToInlineTransition[i] = matchTransition;
                    break;

                case TransitionType.NOT_SET:
                case TransitionType.WILDCARD:
                    // not implemented yet
                    continue;

                default:
                    continue;
            }
        }

        for (const state of atn.states) {
            if (state.ruleIndex < 0) {
                continue;
            }

            let optimizedTransitions: Transition[] | undefined;
            for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {
                const transition: Transition = state.getOptimizedTransition(i);
                if (!(transition instanceof RuleTransition)) {
                    if (optimizedTransitions !== undefined) {
                        optimizedTransitions.push(transition);
                    }

                    continue;
                }

                const ruleTransition: RuleTransition = transition;
                const effective = ruleToInlineTransition[ruleTransition.target.ruleIndex];
                if (effective == null) {
                    if (optimizedTransitions !== undefined) {
                        optimizedTransitions.push(transition);
                    }

                    continue;
                }

                if (optimizedTransitions == null) {
                    optimizedTransitions = [];
                    for (let j = 0; j < i; j++) {
                        optimizedTransitions.push(state.getOptimizedTransition(i));
                    }
                }

                inlinedCalls++;
                const target: ATNState = ruleTransition.followState;
                const intermediateState: ATNState = new BasicState();
                intermediateState.setRuleIndex(target.ruleIndex);
                atn.addState(intermediateState);
                optimizedTransitions.push(new EpsilonTransition(intermediateState));

                switch (effective.serializationType) {
                    case TransitionType.ATOM:
                        intermediateState.addTransition(new AtomTransition(target,
                            (effective as AtomTransition).label.maxElement)); // The label interval only has one member.
                        break;

                    case TransitionType.RANGE:
                        intermediateState.addTransition(new RangeTransition(target, (effective as RangeTransition).from,
                            (effective as RangeTransition).to));
                        break;

                    case TransitionType.SET:
                        intermediateState.addTransition(new SetTransition(target, (effective as SetTransition).label));
                        break;

                    default:
                        throw new Error("UnsupportedOperationException");
                }
            }

            if (optimizedTransitions !== undefined) {
                if (state.isOptimized) {
                    while (state.numberOfOptimizedTransitions > 0) {
                        state.removeOptimizedTransition(state.numberOfOptimizedTransitions - 1);
                    }
                }

                for (const transition of optimizedTransitions) {
                    state.addOptimizedTransition(transition);
                }
            }
        }

        if (ParserATNSimulator.debug) {
            console.log(`ATN runtime optimizer removed ${inlinedCalls} rule invocations by inlining sets.`);
        }

        return inlinedCalls;
    }

    private static combineChainedEpsilons2(atn: ATN): number {
        let removedEdges = 0;

        for (const state of atn.states) {
            if (!state.onlyHasEpsilonTransitions || state instanceof RuleStopState) {
                continue;
            }

            let optimizedTransitions: Transition[] | undefined;
            nextTransition:
            for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {
                const transition: Transition = state.getOptimizedTransition(i);
                const intermediate: ATNState = transition.target;
                if (transition.serializationType !== TransitionType.EPSILON
                    || (transition as EpsilonTransition).outermostPrecedenceReturn !== -1
                    || intermediate.stateType !== ATNStateType.BASIC
                    || !intermediate.onlyHasEpsilonTransitions) {
                    if (optimizedTransitions !== undefined) {
                        optimizedTransitions.push(transition);
                    }

                    continue;
                }

                for (let j = 0; j < intermediate.numberOfOptimizedTransitions; j++) {
                    if (intermediate.getOptimizedTransition(j).serializationType !== TransitionType.EPSILON
                        || (intermediate.getOptimizedTransition(j) as EpsilonTransition)
                            .outermostPrecedenceReturn !== -1) {
                        if (optimizedTransitions !== undefined) {
                            optimizedTransitions.push(transition);
                        }

                        continue nextTransition;
                    }
                }

                removedEdges++;
                if (optimizedTransitions == null) {
                    optimizedTransitions = [];
                    for (let j = 0; j < i; j++) {
                        optimizedTransitions.push(state.getOptimizedTransition(j));
                    }
                }

                for (let j = 0; j < intermediate.numberOfOptimizedTransitions; j++) {
                    const target: ATNState = intermediate.getOptimizedTransition(j).target;
                    optimizedTransitions.push(new EpsilonTransition(target));
                }
            }

            if (optimizedTransitions !== undefined) {
                if (state.isOptimized) {
                    while (state.numberOfOptimizedTransitions > 0) {
                        state.removeOptimizedTransition(state.numberOfOptimizedTransitions - 1);
                    }
                }

                for (const transition of optimizedTransitions) {
                    state.addOptimizedTransition(transition);
                }
            }
        }

        if (ParserATNSimulator.debug) {
            console.log(`ATN runtime optimizer removed ${removedEdges} transitions by combining chained epsilon ` +
                `transitions.`);
        }

        return removedEdges;
    }

    private static optimizeSets2(atn: ATN, preserveOrder: boolean): number {
        if (preserveOrder) {
            // this optimization currently doesn't preserve edge order.
            return 0;
        }

        let removedPaths = 0;
        const decisions: DecisionState[] = atn.decisionToState;
        for (const decision of decisions) {
            const setTransitions: IntervalSet = new IntervalSet();
            for (let i = 0; i < decision.numberOfOptimizedTransitions; i++) {
                const epsTransition: Transition = decision.getOptimizedTransition(i);
                if (!(epsTransition instanceof EpsilonTransition)) {
                    continue;
                }

                if (epsTransition.target.numberOfOptimizedTransitions !== 1) {
                    continue;
                }

                const transition: Transition = epsTransition.target.getOptimizedTransition(0);
                if (!(transition.target instanceof BlockEndState)) {
                    continue;
                }

                if (transition instanceof NotSetTransition) {
                    // TODO: not yet implemented
                    continue;
                }

                if (transition instanceof AtomTransition
                    || transition instanceof RangeTransition
                    || transition instanceof SetTransition) {
                    setTransitions.add(i);
                }
            }

            if (setTransitions.size <= 1) {
                continue;
            }

            const optimizedTransitions: Transition[] = [];
            for (let i = 0; i < decision.numberOfOptimizedTransitions; i++) {
                if (!setTransitions.contains(i)) {
                    optimizedTransitions.push(decision.getOptimizedTransition(i));
                }
            }

            const blockEndState: ATNState = decision.getOptimizedTransition(setTransitions.minElement).target
                .getOptimizedTransition(0).target;
            const matchSet: IntervalSet = new IntervalSet();
            for (const interval of setTransitions.intervals) {
                for (let j = interval.a; j <= interval.b; j++) {
                    const matchTransition = decision.getOptimizedTransition(j).target.getOptimizedTransition(0);
                    if (matchTransition instanceof NotSetTransition) {
                        throw new Error("Not yet implemented.");
                    } else {
                        matchSet.addAll(matchTransition.label as IntervalSet);
                    }
                }
            }

            let newTransition: Transition;
            if (matchSet.intervals.length === 1) {
                if (matchSet.size === 1) {
                    newTransition = new AtomTransition(blockEndState, matchSet.minElement);
                } else {
                    const matchInterval: Interval = matchSet.intervals[0];
                    newTransition = new RangeTransition(blockEndState, matchInterval.a, matchInterval.b);
                }
            } else {
                newTransition = new SetTransition(blockEndState, matchSet);
            }

            const setOptimizedState: ATNState = new BasicState();
            setOptimizedState.setRuleIndex(decision.ruleIndex);
            atn.addState(setOptimizedState);

            setOptimizedState.addTransition(newTransition);
            optimizedTransitions.push(new EpsilonTransition(setOptimizedState));

            removedPaths += decision.numberOfOptimizedTransitions - optimizedTransitions.length;

            if (decision.isOptimized) {
                while (decision.numberOfOptimizedTransitions > 0) {
                    decision.removeOptimizedTransition(decision.numberOfOptimizedTransitions - 1);
                }
            }

            for (const transition of optimizedTransitions) {
                decision.addOptimizedTransition(transition);
            }
        }

        if (ParserATNSimulator.debug) {
            console.log(`ATN runtime optimizer removed ${removedPaths} paths by collapsing sets.`);
        }

        return removedPaths;
    }

    private static identifyTailCalls2(atn: ATN): void {
        for (const state of atn.states) {
            for (let i = 0; i < state.numberOfTransitions; i++) {
                const transition = state.transition(i);
                if (!(transition instanceof RuleTransition)) {
                    continue;
                }

                transition.tailCall = this.testTailCall2(atn, transition, false);
                transition.optimizedTailCall = this.testTailCall2(atn, transition, true);
            }

            if (!state.isOptimized) {
                continue;
            }

            for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {
                const transition = state.getOptimizedTransition(i);
                if (!(transition instanceof RuleTransition)) {
                    continue;
                }

                transition.tailCall = this.testTailCall2(atn, transition, false);
                transition.optimizedTailCall = this.testTailCall2(atn, transition, true);
            }
        }
    }

    private static testTailCall2(atn: ATN, transition: RuleTransition, optimizedPath: boolean): boolean {
        if (!optimizedPath && transition.tailCall) {
            return true;
        }
        if (optimizedPath && transition.optimizedTailCall) {
            return true;
        }

        const reachable: BitSet = new BitSet(atn.states.length);
        const worklist: ATNState[] = [];
        worklist.push(transition.followState);
        while (true) {
            const state = worklist.pop();
            if (!state) {
                break;
            }

            if (reachable.get(state.stateNumber)) {
                continue;
            }

            if (state instanceof RuleStopState) {
                continue;
            }

            if (!state.onlyHasEpsilonTransitions) {
                return false;
            }

            const transitionCount = optimizedPath ? state.numberOfOptimizedTransitions : state.numberOfTransitions;
            for (let i = 0; i < transitionCount; i++) {
                const t = optimizedPath ? state.getOptimizedTransition(i) : state.transition(i);
                if (t.serializationType !== TransitionType.EPSILON) {
                    return false;
                }

                worklist.push(t.target);
            }
        }

        return true;
    }

    public override deserialize(@NotNull data: Uint16Array): ATN {
        // Each Uint16 value in data is shifted by +2 at the entry to this method. This is an encoding optimization
        // targeting the serialized values 0 and -1 (serialized to 0xFFFF), each of which are very common in the
        // serialized form of the ATN. In the modified UTF-8 that Java uses for compiled string literals, these two
        // character values have multi-byte forms. By shifting each value by +2, they become characters 2 and 1 prior to
        // writing the string, each of which have single-byte representations. Since the shift occurs in the tool during
        // ATN serialization, each target is responsible for adjusting the values during deserialization.
        //
        // As a special case, note that the first element of data is not adjusted because it contains the major version
        // number of the serialized ATN, which was fixed at 3 at the time the value shifting was implemented.
        const version: number = data[0];
        if (version !== ATNDeserializer.SERIALIZED_VERSION) {
            const reason =
                `Could not deserialize ATN with version ${version} (expected ${ATNDeserializer.SERIALIZED_VERSION}).`;
            throw new Error(reason);
        }

        data.forEach((value, index, array) => {
            array[index] = (value - 2) & 0xFFFF;
        });

        let p = 1;

        const uuid: UUID = ATNDeserializer.toUUID(data, p);
        p += 8;
        if (CompatibleATNDeserializer.SUPPORTED_UUIDS2.findIndex((e) => { return e.equals(uuid); }) < 0) {
            const reason = `Could not deserialize ATN with UUID ${uuid.toString()} (expected ` +
                `${CompatibleATNDeserializer.SERIALIZED_UUID2.toString()} or a legacy UUID).`;
            throw new Error(reason);
        }
        const generatedByOriginalANTLR4 = uuid.equals(CompatibleATNDeserializer.ADDED_UNICODE_SMP_ORIGINAL);

        const supportsLexerActions = CompatibleATNDeserializer.isFeatureSupported(
            CompatibleATNDeserializer.ADDED_LEXER_ACTIONS2, uuid,
        );

        const grammarType: ATNType = data[p++];
        const maxTokenType: number = data[p++];
        const atn: ATN = new ATN(grammarType, maxTokenType);

        //
        // STATES
        //
        const loopBackStateNumbers: Array<[LoopEndState, number]> = [];
        const endStateNumbers: Array<[BlockStartState, number]> = [];
        const nstates: number = data[p++];
        for (let i = 0; i < nstates; i++) {
            const stype: ATNStateType = data[p++];
            // ignore bad type of states
            if (stype === ATNStateType.INVALID_TYPE) {
                atn.addState(new InvalidState());
                continue;
            }

            let ruleIndex: number = data[p++];
            if (ruleIndex === 0xFFFF) {
                ruleIndex = -1;
            }

            const s: ATNState = this.stateFactory(stype, ruleIndex);
            if (stype === ATNStateType.LOOP_END) { // special case
                const loopBackStateNumber: number = data[p++];
                loopBackStateNumbers.push([s as LoopEndState, loopBackStateNumber]);
            } else if (s instanceof BlockStartState) {
                const endStateNumber: number = data[p++];
                endStateNumbers.push([s, endStateNumber]);
            }
            atn.addState(s);
        }

        // delay the assignment of loop back and end states until we know all the state instances have been initialized
        for (const pair of loopBackStateNumbers) {
            pair[0].loopBackState = atn.states[pair[1]];
        }

        for (const pair of endStateNumbers) {
            pair[0].endState = atn.states[pair[1]] as BlockEndState;
        }

        const numNonGreedyStates: number = data[p++];
        for (let i = 0; i < numNonGreedyStates; i++) {
            const stateNumber: number = data[p++];
            (atn.states[stateNumber] as DecisionState).nonGreedy = true;
        }

        if (!generatedByOriginalANTLR4) {
            const numSllDecisions: number = data[p++];
            for (let i = 0; i < numSllDecisions; i++) {
                const stateNumber: number = data[p++];
                (atn.states[stateNumber] as DecisionState).sll = true;
            }
        }

        const numPrecedenceStates: number = data[p++];
        for (let i = 0; i < numPrecedenceStates; i++) {
            const stateNumber: number = data[p++];
            (atn.states[stateNumber] as RuleStartState).isPrecedenceRule = true;
        }

        //
        // RULES
        //
        const nrules: number = data[p++];
        if (atn.grammarType === ATNType.LEXER) {
            atn.ruleToTokenType = new Int32Array(nrules);
        }

        atn.ruleToStartState = new Array<RuleStartState>(nrules);
        for (let i = 0; i < nrules; i++) {
            const s: number = data[p++];
            const startState: RuleStartState = atn.states[s] as RuleStartState;
            if (!generatedByOriginalANTLR4) {
                startState.leftFactored = data[p++] !== 0;
            }
            atn.ruleToStartState[i] = startState;
            if (atn.grammarType === ATNType.LEXER) {
                let tokenType: number = data[p++];
                if (tokenType === 0xFFFF) {
                    tokenType = Token.EOF;
                }

                atn.ruleToTokenType[i] = tokenType;

                if (!CompatibleATNDeserializer.isFeatureSupported(
                    CompatibleATNDeserializer.ADDED_LEXER_ACTIONS2, uuid)) {
                    // this piece of unused metadata was serialized prior to the
                    // addition of LexerAction
                    let actionIndexIgnored: number = data[p++];
                    if (actionIndexIgnored === 0xFFFF) {
                        actionIndexIgnored = -1;
                    }
                }
            }
        }

        atn.ruleToStopState = new Array<RuleStopState>(nrules);
        for (const state of atn.states) {
            if (!(state instanceof RuleStopState)) {
                continue;
            }

            atn.ruleToStopState[state.ruleIndex] = state;
            atn.ruleToStartState[state.ruleIndex].stopState = state;
        }

        //
        // MODES
        //
        const nmodes: number = data[p++];
        for (let i = 0; i < nmodes; i++) {
            const s: number = data[p++];
            atn.modeToStartState.push(atn.states[s] as TokensStartState);
        }

        atn.modeToDFA = new Array<DFA>(nmodes);
        for (let i = 0; i < nmodes; i++) {
            atn.modeToDFA[i] = new DFA(atn.modeToStartState[i]);
        }

        //
        // SETS
        //
        const sets: IntervalSet[] = [];
        // First, read all sets with 16-bit Unicode code points <= U+FFFF.
        p = this.deserializeSets2(data, p, sets,
            CompatibleATNDeserializer.getUnicodeDeserializer2(UnicodeDeserializingMode.UNICODE_BMP));

        // Next, if the ATN was serialized with the Unicode SMP feature,
        // deserialize sets with 32-bit arguments <= U+10FFFF.
        if (CompatibleATNDeserializer.isFeatureSupported(CompatibleATNDeserializer.ADDED_UNICODE_SMP2, uuid)
            || CompatibleATNDeserializer.isFeatureSupported(
                CompatibleATNDeserializer.ADDED_UNICODE_SMP_ORIGINAL, uuid)) {
            p = this.deserializeSets2(data, p, sets,
                CompatibleATNDeserializer.getUnicodeDeserializer2(UnicodeDeserializingMode.UNICODE_SMP));
        }

        //
        // EDGES
        //
        const nedges: number = data[p++];
        for (let i = 0; i < nedges; i++) {
            const src: number = ATNDeserializer.toInt(data[p]);
            const trg: number = ATNDeserializer.toInt(data[p + 1]);
            const ttype: number = ATNDeserializer.toInt(data[p + 2]);
            const arg1: number = ATNDeserializer.toInt(data[p + 3]);
            const arg2: number = ATNDeserializer.toInt(data[p + 4]);
            const arg3: number = ATNDeserializer.toInt(data[p + 5]);
            const trans: Transition = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
            const srcState: ATNState = atn.states[src];
            srcState.addTransition(trans);
            p += 6;
        }

        // edges for rule stop states can be derived, so they aren't serialized
        interface T { stopState: number; returnState: number; outermostPrecedenceReturn: number; }
        const returnTransitionsSet = new Array2DHashSet<T>({
            hashCode: (o: T) => { return o.stopState ^ o.returnState ^ o.outermostPrecedenceReturn; },

            equals: (a: T, b: T): boolean => {
                return a.stopState === b.stopState
                    && a.returnState === b.returnState
                    && a.outermostPrecedenceReturn === b.outermostPrecedenceReturn;
            },
        });
        const returnTransitions: T[] = [];
        for (const state of atn.states) {
            const returningToLeftFactored: boolean = state.ruleIndex >= 0
                && atn.ruleToStartState[state.ruleIndex].leftFactored;
            for (let i = 0; i < state.numberOfTransitions; i++) {
                const t: Transition = state.transition(i);
                if (!(t instanceof RuleTransition)) {
                    continue;
                }

                const ruleTransition: RuleTransition = t;
                const returningFromLeftFactored = atn.ruleToStartState[ruleTransition.target.ruleIndex].leftFactored;
                if (!returningFromLeftFactored && returningToLeftFactored) {
                    continue;
                }

                let outermostPrecedenceReturn = -1;
                if (atn.ruleToStartState[ruleTransition.target.ruleIndex].isPrecedenceRule) {
                    if (ruleTransition.precedence === 0) {
                        outermostPrecedenceReturn = ruleTransition.target.ruleIndex;
                    }
                }

                const current = {
                    stopState: ruleTransition.target.ruleIndex,
                    returnState: ruleTransition.followState.stateNumber,
                    outermostPrecedenceReturn,
                };
                if (returnTransitionsSet.add(current)) {
                    returnTransitions.push(current);
                }
            }
        }

        // Add all elements from returnTransitions to the ATN
        for (const returnTransition of returnTransitions) {
            const transition = new EpsilonTransition(atn.states[returnTransition.returnState],
                returnTransition.outermostPrecedenceReturn);
            atn.ruleToStopState[returnTransition.stopState].addTransition(transition);
        }

        for (const state of atn.states) {
            if (state instanceof BlockStartState) {
                // we need to know the end state to set its start state
                if (state.endState == null) {
                    throw new Error("IllegalStateException");
                }

                // block end states can only be associated to a single block start state
                if (state.endState.startState !== undefined) {
                    throw new Error("IllegalStateException");
                }

                state.endState.startState = state;
            }

            if (state instanceof PlusLoopbackState) {
                const loopbackState: PlusLoopbackState = state;
                for (let i = 0; i < loopbackState.numberOfTransitions; i++) {
                    const target: ATNState = loopbackState.transition(i).target;
                    if (target instanceof PlusBlockStartState) {
                        target.loopBackState = loopbackState;
                    }
                }
            } else if (state instanceof StarLoopbackState) {
                const loopbackState: StarLoopbackState = state;
                for (let i = 0; i < loopbackState.numberOfTransitions; i++) {
                    const target: ATNState = loopbackState.transition(i).target;
                    if (target instanceof StarLoopEntryState) {
                        target.loopBackState = loopbackState;
                    }
                }
            }
        }

        //
        // DECISIONS
        //
        const ndecisions: number = data[p++];
        for (let i = 1; i <= ndecisions; i++) {
            const s: number = data[p++];
            const decState: DecisionState = atn.states[s] as DecisionState;
            atn.decisionToState.push(decState);
            decState.decision = i - 1;
        }

        //
        // LEXER ACTIONS
        //
        if (atn.grammarType === ATNType.LEXER) {
            if (supportsLexerActions) {
                atn.lexerActions = new Array<LexerAction>(data[p++]);
                for (let i = 0; i < atn.lexerActions.length; i++) {
                    const actionType: LexerActionType = data[p++];
                    let data1: number = data[p++];
                    if (data1 === 0xFFFF) {
                        data1 = -1;
                    }

                    let data2: number = data[p++];
                    if (data2 === 0xFFFF) {
                        data2 = -1;
                    }

                    const lexerAction: LexerAction = this.lexerActionFactory(actionType, data1, data2);

                    atn.lexerActions[i] = lexerAction;
                }
            } else {
                // for compatibility with older serialized ATNs, convert the old
                // serialized action index for action transitions to the new
                // form, which is the index of a LexerCustomAction
                const legacyLexerActions: LexerAction[] = [];
                for (const state of atn.states) {
                    for (let i = 0; i < state.numberOfTransitions; i++) {
                        const transition: Transition = state.transition(i);
                        if (!(transition instanceof ActionTransition)) {
                            continue;
                        }

                        const ruleIndex: number = transition.ruleIndex;
                        const actionIndex: number = transition.actionIndex;
                        const lexerAction: LexerCustomAction = new LexerCustomAction(ruleIndex, actionIndex);
                        state.setTransition(i, new ActionTransition(transition.target, ruleIndex,
                            legacyLexerActions.length, false));
                        legacyLexerActions.push(lexerAction);
                    }
                }

                atn.lexerActions = legacyLexerActions;
            }
        }

        this.markPrecedenceDecisions(atn);

        atn.decisionToDFA = new Array<DFA>(ndecisions);
        for (let i = 0; i < ndecisions; i++) {
            atn.decisionToDFA[i] = new DFA(atn.decisionToState[i], i);
        }

        if (this.deserializationOptions2.isVerifyATN) {
            this.verifyATN(atn);
        }

        if (this.deserializationOptions2.isGenerateRuleBypassTransitions && atn.grammarType === ATNType.PARSER) {
            atn.ruleToTokenType = new Int32Array(atn.ruleToStartState.length);
            for (let i = 0; i < atn.ruleToStartState.length; i++) {
                atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
            }

            for (let i = 0; i < atn.ruleToStartState.length; i++) {
                const bypassStart: BasicBlockStartState = new BasicBlockStartState();
                bypassStart.ruleIndex = i;
                atn.addState(bypassStart);

                const bypassStop: BlockEndState = new BlockEndState();
                bypassStop.ruleIndex = i;
                atn.addState(bypassStop);

                bypassStart.endState = bypassStop;
                atn.defineDecisionState(bypassStart);

                bypassStop.startState = bypassStart;

                let endState: ATNState | undefined;
                let excludeTransition: Transition | undefined;
                if (atn.ruleToStartState[i].isPrecedenceRule) {
                    // wrap from the beginning of the rule to the StarLoopEntryState
                    endState = undefined;
                    for (const state of atn.states) {
                        if (state.ruleIndex !== i) {
                            continue;
                        }

                        if (!(state instanceof StarLoopEntryState)) {
                            continue;
                        }

                        const maybeLoopEndState: ATNState = state.transition(state.numberOfTransitions - 1).target;
                        if (!(maybeLoopEndState instanceof LoopEndState)) {
                            continue;
                        }

                        if (maybeLoopEndState.epsilonOnlyTransitions
                            && maybeLoopEndState.transition(0).target instanceof RuleStopState) {
                            endState = state;
                            break;
                        }
                    }

                    if (!endState) {
                        throw new Error("Couldn't identify final state of the precedence rule prefix section.");
                    }

                    excludeTransition = (endState as StarLoopEntryState).loopBackState.transition(0);
                } else {
                    endState = atn.ruleToStopState[i];
                }

                // all non-excluded transitions that currently target end state need to target blockEnd instead
                for (const state of atn.states) {
                    for (let tansitionIndex = 0; tansitionIndex < state.numberOfTransitions; tansitionIndex++) {
                        const transition = state.transition(tansitionIndex);
                        if (transition === excludeTransition) {
                            continue;
                        }

                        if (transition.target === endState) {
                            transition.target = bypassStop;
                        }
                    }
                }

                // all transitions leaving the rule start state need to leave blockStart instead
                while (atn.ruleToStartState[i].numberOfTransitions > 0) {
                    const transition: Transition = atn.ruleToStartState[i].removeTransition(
                        atn.ruleToStartState[i].numberOfTransitions - 1);
                    bypassStart.addTransition(transition);
                }

                // link the new states
                atn.ruleToStartState[i].addTransition(new EpsilonTransition(bypassStart));
                bypassStop.addTransition(new EpsilonTransition(endState));

                const matchState: ATNState = new BasicState();
                atn.addState(matchState);
                matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[i]));
                bypassStart.addTransition(new EpsilonTransition(matchState));
            }

            if (this.deserializationOptions2.isVerifyATN) {
                // reverify after modification
                this.verifyATN(atn);
            }
        }

        if (this.deserializationOptions2.isOptimize) {
            while (true) {
                let optimizationCount = 0;
                optimizationCount += CompatibleATNDeserializer.inlineSetRules2(atn);
                optimizationCount += CompatibleATNDeserializer.combineChainedEpsilons2(atn);
                const preserveOrder: boolean = atn.grammarType === ATNType.LEXER;
                optimizationCount += CompatibleATNDeserializer.optimizeSets2(atn, preserveOrder);
                if (optimizationCount === 0) {
                    break;
                }
            }

            if (this.deserializationOptions2.isVerifyATN) {
                // reverify after modification
                this.verifyATN(atn);
            }
        }

        CompatibleATNDeserializer.identifyTailCalls2(atn);

        return atn;
    }

    private deserializeSets2(data: Uint16Array, p: number, sets: IntervalSet[],
        unicodeDeserializer: IUnicodeDeserializer): number {
        const nsets: number = data[p++];
        for (let i = 0; i < nsets; i++) {
            const nintervals: number = ATNDeserializer.toInt(data[p]);
            p++;
            const set: IntervalSet = new IntervalSet();
            sets.push(set);

            const containsEof: boolean = data[p++] !== 0;
            if (containsEof) {
                set.add(-1);
            }

            for (let j = 0; j < nintervals; j++) {
                const a: number = unicodeDeserializer.readUnicode(data, p);
                p += unicodeDeserializer.size;
                const b: number = unicodeDeserializer.readUnicode(data, p);
                p += unicodeDeserializer.size;
                set.add(a, b);
            }
        }

        return p;
    }
}
